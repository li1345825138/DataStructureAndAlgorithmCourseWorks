<?xml version="1.0"?>
<!DOCTYPE module PUBLIC "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN" "https://checkstyle.org/dtds/configuration_1_3.dtd">

<module name="Checker">
    <!-- Directory where the .java file lives. -->
    <!-- The property "basedir" should be passed as a -D command-line option to Java: -->
    <!--   -Dbasedir="/autograder/source/project1/src" -->
    <property name="basedir" value="${basedir}" />

    <!-- Suppress certain checks on a file-by-file basis. -->
    <!-- The property "suppressions" should be passed as a -D command-line option to Java: -->
    <!--   -Dsuppressions="/autograder/source/lib/checkstyle-suppressions.xml" -->
    <module name="SuppressionFilter">
        <property name="file" value="${suppressions}"/>
        <property name="optional" value="false"/>
    </module>

    <!-- Properties for JVM. -->
    <property name="localeCountry" value="US"/>
    <property name="localeLanguage" value="en"/>
    <property name="charset" value="UTF-8"/>

    <!-- Continue processing even if there is an exception. -->
    <property name="haltOnException" value="false"/>

    <!-- By default, everything flagged is a warning. -->
    <property name="severity" value="warning"/>

    <!-- ================================================= -->
    <!-- CHECKS THAT DO NOT REQUIRE WALKING THE PARSE TREE -->
    <!-- ================================================= -->

    <!-- Check that there are no tab characters in the source code; report only first instance. -->
    <module name="FileTabCharacter">
        <property name="fileExtensions" value="java"/>
        <property name="eachLine" value="false"/>
        <message key="containsTab" value="Line contains a tab character. Configure your editor to replace tabs with spaces."/>
        <message key="file.containsTab" value="File contains tab characters (this is the first occurrence). Configure your editor to replace tabs with spaces."/>
    </module>

    <!-- Check that no file is more than 1500 lines long. -->
    <module name="FileLength">
        <property name="max" value="1500"/>
    </module>

    <!-- Check for non printable characters (excluding Tab, CR, LF). -->
    <module name="RegexpSingleline">
        <property name="id" value="NonPrintableCharacters"/>
        <property name="fileExtensions" value ="java"/>
        <property name="format" value="[\x00-\x08\x0B-\x0C\x0E-\x1F\x7F]"/>
        <property name="message" value="Line contains either a non-printable or control character."/>
    </module>

    <!-- Check for Rich Text Format (RTF). -->
    <module name="RegexpMultiline">
        <property name="id" value="RichTextFormat"/>
        <property name="fileExtensions" value="java"/>
        <property name="format" value="\A\{\\rtf1\\ansi\\ansicpg1252"/>
        <property name="message" value="This appears to be a Rich Text Format (RTF) file. Reconfigure your editor to save as an ASCII or UTF-8 text file."/>
    </module>

    <!-- Check for byte order mark (BOM) that might be set by editor when saving Unicode. -->
    <module name="RegexpMultiline">
        <property name="id" value="ByteOrderMark"/>
        <property name="fileExtensions" value ="java"/>
        <property name="format" value="\A[\uFEFF\uFFEF]"/>
        <property name="message" value="This file appears to be setting the byte order mark (BOM)."/>
    </module>

    <!-- Check that filename is not longer than 32 characters. -->
    <module name="RegexpOnFilename">
        <property name="id" value="LongFileName"/>
        <property name="fileNamePattern" value="^.{33,}$"/>
        <property name="match" value="true"/>
        <message key = "regexp.filename.match" value="The filename must not be longer than 32 characters."/>
    </module>

    <!-- ========================================== -->
    <!-- CHECKS THAT REQUIRE WALKING THE PARSE TREE -->
    <!-- ========================================== -->

    <module name="TreeWalker">
        <!-- Check for basic indentation conventions. -->
        <property name="tabWidth" value="4"/>
        
        <module name="Indentation" />

        <!-- Avoid Math.random(). -->
        <module name="IllegalMethodCall">
            <property name="format" value="Math\.random"/>
            <message key = "illegal.method.call" value="Do not call ''{0}'' in this course."/>
        </module>

        <!-- Avoid System.exit(), etc. -->
        <module name="IllegalMethodCall">
            <property name="format" value="System\..*"/>
            <message key = "illegal.method.call" value="Do not call ''{0}'' in this course."/>
        </module>

        <!-- Avoid StdRandom.setSeed() -->
        <module name="IllegalMethodCall">
            <property name="format" value="StdRandom\.setSeed"/>
            <message key="illegal.method.call" value="Do not call ''{0}'' in this course."/>
        </module>

        <!-- ==================================================== -->
        <!-- BLOCK CHECKS                                         -->
        <!-- https://checkstyle.sourceforge.io/config_blocks.html -->
        <!-- ==================================================== -->

        <module name="EmptyCatchBlock"/>

        <module name="AvoidNestedBlocks">
            <message key="block.nested" value="Avoid nested blocks: the curly braces serve no purpose."/>
        </module>

        <module name="NeedBraces">
            <property name="tokens" value="LITERAL_IF, LITERAL_ELSE, LITERAL_WHILE, LITERAL_DO, LITERAL_FOR"/>
        </module>
 
        <module name="EmptyBlock">
          <property name="option" value="text"/>
          <message key="block.noStmt" value="A block must have at least one statement."/>
        </module>

        <module name="LeftCurly"/>
        
        <module name="RightCurly"/>

        <!-- ==================================================== -->
        <!-- CLASS DESIGN                                         -->
        <!-- https://checkstyle.sourceforge.io/config_design.html -->
        <!-- ==================================================== -->

        <module name="InterfaceIsType">
            <message key="interface.type" value="An interface must describe a type (and have methods)."/>
        </module>

        <module name="MutableException"/>
        
        <module name="ThrowsCount"/>

        <!-- ==================================================== -->
        <!-- CODING VIOLATIONS                                    -->
        <!-- https://checkstyle.sourceforge.io/config_coding.html -->
        <!-- ==================================================== -->

        <module name="CovariantEquals">
            <message key="covariant.equals" value="The type of the parameter variable for the ''equals()'' method must be ''Object''."/>
        </module>

        <module name="EmptyStatement">
            <message key="empty.statement" value="Are you sure you want an empty statement here? An empty statement might indicate a superfluous semicolon."/>
        </module>

        <module name="InnerAssignment"/>

        <module name="ModifiedControlVariable">
            <message key="modified.control.variable" value="Control variable ''{0}'' is modified inside loop."/>
        </module>

        <module name="SimplifyBooleanExpression">
            <message key="simplify.expression" value="Boolean expression can be simplified, e.g., use ''if (!isEmpty)'' instead of ''if (isEmpty == false)''."/>
        </module>

        <module name="SimplifyBooleanReturn">
            <message key="simplify.boolreturn" value="Conditional logic can be removed in return statement, e.g., use ''return x >= 0'' instead of ''if (x >= 0) return true; else return false;''."/>
        </module>

        <module name="StringLiteralEquality">
            <message key="string.literal.equality" value="Compare string literals using ''equals()'', not ''{0}''."/>
        </module>

        <module name="NestedForDepth">
            <property name="max" value="3"/>
            <message key="nested.for.depth" value="Using deeply nested loop suggests poor design in this program."/>
        </module>

        <module name="NestedIfDepth">
            <property name="max" value="4"/>
            <message key="nested.if.depth" value="Using deeply nested if statement suggests poor design in this program."/>
        </module>

        <module name="NestedTryDepth">
            <property name="max" value="0"/>
            <message key="nested.try.depth" value="Using a nested try statement suggests poor design in this program."/>
        </module>

        <module name="NoClone"/>

        <module name="NoFinalizer"/>

        <module name="SuperClone"/>

        <module name="SuperFinalize"/>
       
        <module name="IllegalType">
            <property name="illegalClassNames" value="StringBuffer, java.lang.StringBuffer"/>
            <message key="illegal.type" value="Do not use ''{0}'' in this course. Instead, use ''StringBuilder''."/>
        </module>

        <module name="IllegalInstantiation">
            <property name="classes" value="java.lang.StringBuffer"/>
            <message key="instantiation.avoid" value="Do not use ''{0}'' in this course. Instead, use ''StringBuilder''."/>
        </module>

        <module name="MyIllegalType">
            <property name="id" value="Wrapper"/>
            <property name="illegalClassNames" value="java.lang.Boolean"/>
            <message key="illegal.type" value="Use the primitive type ''boolean'' instead of the wrapper type ''{0}''."/>
        </module>

        <module name="MyIllegalType">
            <property name="id" value="Wrapper"/>
            <property name="illegalClassNames" value="java.lang.Double"/>
            <message key="illegal.type" value="Use the primitive type ''double'' instead of the wrapper type ''{0}''."/>
        </module>

        <module name="MyIllegalType">
            <property name="id" value="Wrapper"/>
            <property name="illegalClassNames" value="java.lang.Integer"/>
            <message key="illegal.type" value="Use the primitive type ''int'' instead of the wrapper type ''{0}''."/>
        </module>

        <module name="MyIllegalType">
            <property name="id" value="Wrapper"/>
            <property name="illegalClassNames" value="java.lang.Character"/>
            <message key="illegal.type" value="Use the primitive type ''char'' instead of the wrapper type ''{0}''."/>
        </module>

        <module name="MyIllegalType">
            <property name="id" value="Wrapper"/>
            <property name="illegalClassNames" value="java.lang.Long,
                                                      java.lang.Short,
                                                      java.lang.Float,
                                                      java.lang.Byte"/>
            <message key="illegal.type" value="Use the primitive type instead of the corresponding wrapper type ''{0}''. For example, use ''long'' instead of ''Long''."/>
        </module>

        <module name="IllegalInstantiation">
            <property name="id" value="Wrapper"/>
            <property name="classes" value="java.lang.Boolean,
                                            java.lang.Integer,
                                            java.lang.Double,
                                            java.lang.Long,
                                            java.lang.Short,
                                            java.lang.Float,
                                            java.lang.Byte,
                                            java.lang.Character"/>
            <message key="instantiation.avoid" value="You should not need to call the ''{0}'' constructor."/>
        </module>

        <module name="DeclarationOrder">
            <message key="declaration.order.constructor" value="Define constructors after static and instance variables but before methods."/>
            <message key="declaration.order.method"      value="Define methods after static variables, instance variables, and constructors."/>
            <message key="declaration.order.instance"    value="Declare instance variables after static variables but before constructors and methods."/>
            <message key="declaration.order.access"      value="Declare static and instance variables in order of their access modifiers: public, protected, package, and private."/>
            <message key="declaration.order.static"      value="Declare static variables before instance variables, constructors, and methods."/>
        </module>

        <module name="ParameterAssignment">
            <message key="parameter.assignment" value="Changing the value of the parameter variable ''{0}'' suggests poor design. Instead, define a local variable."/>
        </module>

        <module name="DefaultComesLast"/>

        <module name="FallThrough"/>

        <module name="OneStatementPerLine">
            <message key="multiple.statements.line" value="Do not put multiple statements on the same line."/>
        </module>

        <module name="IllegalToken">
            <property name="id" value="FloatType"/>
            <property name="tokens" value="LITERAL_FLOAT"/>
            <message key="illegal.token" value="Use the primitive type ''double'' instead of the primitive type ''float''."/>
        </module>

        <module name="IllegalTokenText">
            <property name="id" value="FloatLiteral"/>
            <property name="tokens" value="NUM_FLOAT"/>
            <property name="format" value="^.*f$"/>
            <message key="illegal.token.text" value="Use a ''double'' literal instead of a ''float'' literal."/>
        </module>

        <module name="IllegalTokenText">
            <property name="id" value="FloatingPointLiteral"/>
            <property name="tokens" value="NUM_FLOAT, NUM_DOUBLE"/>
            <property name="format" value="^\..*"/>
            <message key="illegal.token.text" value="Use at least one digit to the left of the decimal point. For example, use the literal ''0.5'' instead of ''.5''."/>
        </module>

        <module name="IllegalTokenText">
            <property name="id" value="OctalLiteral"/>
            <property name="tokens" value="NUM_INT,NUM_LONG"/>
            <property name="format" value="^0[^lxb]"/>
            <property name="ignoreCase" value="true"/>
            <message key="illegal.token.text" value="A leading 0 in an integer literal signifies that it is an octal (base-8) integer."/>
        </module>

        <module name="IllegalTokenText">
            <property name="id" value="IntegerLiteral"/>
            <property name="tokens" value="NUM_INT,NUM_LONG"/>
            <property name="format" value="^2147483647L?$"/>
            <message key="illegal.token.text" value="Use the named constant ''Integer.MAX_VALUE'' instead of ''2147483647''."/>
        </module>

        <module name="IllegalTokenText">
            <property name="id" value="IntegerLiteral"/>
            <property name="tokens" value="NUM_INT,NUM_LONG"/>
            <property name="format" value="^2147483648L?$"/>
            <message key="illegal.token.text" value="Use the named constant ''Integer.MIN_VALUE'' instead of ''-2147483648''."/>
        </module>

        <module name="IllegalTokenText">
            <property name="id" value="LongLiteral"/>
            <property name="tokens" value="NUM_LONG"/>
            <property name="format" value="^9223372036854775807L$"/>
            <message key="illegal.token.text" value="Use the named constant ''Long.MAX_VALUE'' instead of ''9223372036854775807L''."/>
        </module>

        <module name="IllegalTokenText">
            <property name="id" value="LongLiteral"/>
            <property name="tokens" value="NUM_LONG"/>
            <property name="format" value="^9223372036854775808L$"/>
            <message key="illegal.token.text" value="Use the named constant ''Long.MIN_VALUE'' instead of ''-9223372036854775808L''."/>
        </module>

        <module name="IllegalTokenText">
            <property name="id" value="WhitespaceAfter"/>
            <property name="tokens" value="COMMENT_CONTENT"/>
            <property name="format" value="^[\*/]*[A-Za-z0-9]"/>
            <message key="illegal.token.text" value="''//'' or ''/*'' is not followed by whitespace."/>
        </module>

        <module name="IllegalTokenText">
            <property name="id" value="EmptyComment"/>
            <property name="tokens" value="COMMENT_CONTENT"/>
            <property name="format" value="^\s*$"/>
            <message key="illegal.token.text" value="The comment is empty."/>
        </module>

        <module name="IllegalTokenText">
            <property name="id" value="IdentifierName"/>
            <property name="tokens" value="IDENT"/>
            <property name="format" value="^(one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve)$"/>
            <property name="ignoreCase" value="true"/>
            <message key="illegal.token.text" value="Do not use the name of a number (such as ''ten'') as a variable name (or other identifier)."/>
        </module>

        <!-- ===================================================== -->
        <!-- IMPORTS                                               -->
        <!-- https://checkstyle.sourceforge.io/config_imports.html -->
        <!-- ===================================================== -->

        <module name="AvoidStaticImport">
            <message key="import.avoidStatic" value="Do not use static imports in this course."/>
        </module>

        <module name="RedundantImport">
            <message key="import.same" value="Unnecessary import statement for ''{0}'' becaue it is in the same package as this class."/>
            <message key="import.lang" value="Unnecessary import statement for ''{0}'' because it is from the package ''java.lang''."/>
            <message key="import.duplicate" value="Duplicate import statement for ''{1}''."/>
        </module>

        <module name="UnusedImports">
            <message key="import.unused" value="Unused import statement for ''{0}''."/>
        </module>

        <module name="AvoidStarImport">
            <message key="import.avoidStar" value="Do not use .* in import statements."/>
        </module>

        <module name="IllegalImport">
          <property name="regexp" value="false"/>
          <property name="illegalPkgs" value="java.math"/>
          <message key="import.illegal" value="Do not import ''{0}'' in this course."/>
        </module>

        <!-- ================================================== -->
        <!-- MISCELLANEOUS CHECKS                               -->
        <!-- https://checkstyle.sourceforge.io/config_misc.html -->
        <!-- ================================================== -->

        <module name="UpperEll">
            <message key="upperEll" value="Use an uppercase ''L'' instead of a lowercase ''l'' to specify a literal of type long."/>
        </module>

        <module name="ArrayTypeStyle">
            <message key="array.type.style" value="To specify an array type, put the square brackets before the variable name, e.g., ''String[] args'' instead of ''String args[]''."/>
        </module>

        <module name="OuterTypeFilename">
            <message key="type.file.mismatch" value="The name of the outer type and the file do not match. For example, the class Point must be in a file named Point.java."/>
        </module>

        <module name="DescendantToken">
            <property name="id" value="AssertSideEffect"/>
            <property name="tokens" value="LITERAL_ASSERT"/>
            <property name="limitedTokens" value="ASSIGN,DEC,INC,POST_DEC,POST_INC,PLUS_ASSIGN,
                                                  MINUS_ASSIGN,STAR_ASSIGN,DIV_ASSIGN,MOD_ASSIGN,
                                                  BSR_ASSIGN,SR_ASSIGN,SL_ASSIGN,BAND_ASSIGN,
                                                  BXOR_ASSIGN,BOR_ASSIGN"/>
            <property name="maximumNumber" value="0"/>
            <property name="maximumMessage" value="Assert statements must not produce side effects."/>
        </module>

        <module name="DescendantToken">
            <property name="id" value="UselessCompare"/>
            <property name="tokens" value="EQUAL,NOT_EQUAL"/>
            <property name="limitedTokens" value="LITERAL_THIS,LITERAL_NULL"/>
            <property name="maximumNumber" value="1"/>
            <property name="maximumDepth" value="1"/>
            <property name="sumTokenCounts" value="true"/>
            <property name="maximumMessage" value="Do not compare ''this'' with ''null''; it is never null."/>
        </module>

        <!-- ====================================================== -->
        <!-- MODIFIERS                                              -->
        <!-- https://checkstyle.sourceforge.io/config_modifier.html -->
        <!-- ====================================================== -->

        <module name="ModifierOrder">
            <message key = "mod.order" value = "The modifier ''{0}'' is out of order. The preferred order is [''public'', ''protected'', ''private'', ''abstract'', ''static'', ''final'', ''transient'', ''volatile'', ''synchronized'', ''native'', and ''strictfp'']."/>
        </module>

        <!-- ==================================================== -->
        <!-- NAMING CONVENTIONS                                   -->
        <!-- https://checkstyle.sourceforge.io/config_naming.html -->
        <!-- ==================================================== -->

        <module name="ConstantName">
            <message key="name.invalidPattern" value="The constant ''{0}'' must be ALL_UPPERCASE, with words separated by underscores."/>
        </module>

        <module name="LocalFinalVariableName">
            <property name="format" value="^([a-z][a-zA-Z0-9]*|[A-Z][A-Z_0-9]*)$"/>
            <message key="name.invalidPattern" value="The local final variable ''{0}'' must start with a lowercase letter and use camelCase (or be ALL_UPPERCASE if it is a constant)."/>
        </module>  

        <module name="LocalVariableName">
            <property name="format" value="^([a-z][a-zA-Z0-9]*|[A-Z][A-Z_0-9]+|G|N|T)$"/>
            <message key="name.invalidPattern" value="The local variable ''{0}'' must start with a lowercase letter and use camelCase."/>
        </module>

        <module name="MemberName">
            <property name="format" value="^([a-z][a-zA-Z0-9]*|G|N|T)$"/>
            <message key="name.invalidPattern" value="The instance variable ''{0}'' must start with a lowercase letter and use camelCase."/>
        </module>

        <module name="MethodName">
            <message key="name.invalidPattern" value="The method ''{0}'' must start with a lowercase letter and use camelCase."/>
            <message key="method.name.equals.class.name" value="The method name ''{0}'' must not be identical to the class name. Remove the return type if you intended to define a constructor instead of a method."/>
        </module>

        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
            <message key="name.invalidPattern" value="The package ''{0}'' must be lowercase, with package components separated by dots."/>
        </module>

        <module name="ParameterName">
            <property name="format" value="^([a-z][a-zA-Z0-9]*|G)$"/>
            <message key="name.invalidPattern" value="The parameter variable ''{0}'' must start with a lowercase letter and use camelCase."/>
        </module>

        <module name="StaticVariableName">
            <message key="name.invalidPattern" value="The static variable ''{0}'' must start with a lowercase letter and use camelCase. If you intended ''{0}'' to be a constant, add the modifier ''final'' immediately after ''static'' and use ALL_UPPERCASE."/>
        </module>

        <module name="TypeName">
            <message key="name.invalidPattern" value="The class ''{0}'' must start with an uppercase letter and use CamelCase."/>
        </module>

        <module name="ClassTypeParameterName">
            <property name="format" value="^[A-Z][a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern" value="The type parameter ''{0}'' must either be a single uppercase letter or start with an uppercase letter and use CamelCase."/>
        </module>

        <module name="MethodTypeParameterName">
            <property name="format" value="^[A-Z][a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern" value="The type parameter ''{0}'' must either be a single uppercase letter or start with an uppercase letter and use CamelCase."/>
        </module>

        <module name="InterfaceTypeParameterName">
            <property name="format" value="^[A-Z][a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern" value="The type parameter ''{0}'' must either be a single uppercase letter or start with an uppercase letter and use CamelCase."/>
        </module>

        <!-- ==================================================== -->
        <!-- Regexp                                               -->
        <!-- https://checkstyle.sourceforge.io/config_regexp.html -->
        <!-- ==================================================== -->

        <module name="RegexpSinglelineJava">
            <property name="id" value="AlwaysReturnsZero"/>
            <property name="format" value="\bStdRandom\s*\.*\s*uniform\s*\(\s*1\s*\)"/>
            <property name="ignoreComments" value="true"/>
            <property name="message" value="The method call ''StdRandom.uniform(1)'' always returns ''0''. Did you mean ''StdRandom.uniform(0.0, 1.0)''?"/>
        </module>

        <module name="RegexpSinglelineJava">
            <property name="id" value="AlwaysReturnsZero"/>
            <property name="format" value="\bStdRandom\s*\.*\s*uniform\s*\(\s*0\s*,\s*1\s*\)"/>
            <property name="ignoreComments" value="true"/>
            <property name="message" value="The method call ''StdRandom.uniform(0, 1)'' always returns ''0''. Did you mean ''StdRandom.uniform(0.0, 1.0)''?"/>
        </module>

        <module name="RegexpSinglelineJava">
            <property name="id" value="Performance"/>
            <property name="format" value="\bMath\.pow\([^,]*, *3(\.0?)?\)"/>
            <property name="ignoreComments" value="true"/>
            <property name="message" value="''Math.pow(x, 3)'' is slow. Use ''x * x * x'' instead."/>
        </module>

        <module name="RegexpSinglelineJava">
            <property name="id" value="Sqrt"/>
            <property name="format" value="\bMath\.pow\([^,]*, *0?\.5\)"/>
            <property name="ignoreComments" value="true"/>
            <property name="message" value="Use ''Math.sqrt(x)'' instead of ''Math.pow(x, 0.5)''."/>
        </module>

        <module name="RegexpSinglelineJava">
            <property name="id" value="Infinity"/>
            <property name="format" value="\bDouble\.MIN_VALUE\b"/>
            <property name="ignoreComments" value="true"/>
            <property name="message" value="''Double.MIN_VALUE'' is the smallest positive double. Did you mean to use ''Double.NEGATIVE_INFINITY'' instead?"/>
        </module>

        <module name="RegexpSinglelineJava">
            <property name="id" value="Infinity"/>
            <property name="format" value="\bDouble\.MAX_VALUE\b"/>
            <property name="ignoreComments" value="true"/>
            <property name="message" value="Did you mean to use ''Double.POSITIVE_INFINITY'' instead of ''Double.MAX_VALUE''?"/>
        </module>

        <module name="RegexpSinglelineJava">
            <property name="id" value="UnnecessaryJavaLang"/>
            <property name="format" value="\bjava\.lang\.[A-Z]"/>
            <property name="ignoreComments" value="true"/>
            <property name="message" value="Java automatically imports all classes and interfaces in the package ''java.lang''. So, there is no need to import such classes or interfaces; you can refer directly to them without the ''java.lang'' prefix."/>
        </module>

        <module name="AnonInnerLength"/>

        <module name="MethodCount"/>

        <module name="GenericWhitespace"/>

        <module name="EmptyForInitializerPad"/>

        <module name="EmptyForIteratorPad"/>

        <module name="MethodParamPad"/>

        <module name="NoWhitespaceAfter">
           <property name="tokens" value="BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS, UNARY_PLUS"/>
         </module>

        <module name="NoWhitespaceBefore"/>

        <module name="ParenPad"/>

        <module name="TypecastParenPad"/>

        <module name="WhitespaceAfter">
            <message key="ws.typeCast" value="Typecast is not followed by whitespace."/>
        </module>

        <module name="WhitespaceAround">
           <property name="tokens"
            value="ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, 
                   BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON,  DIV_ASSIGN,
                   EQUAL, GE, GT, LAND, LCURLY, LE, LITERAL_ASSERT,
                   LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY,
                   LITERAL_FOR, LITERAL_IF, LITERAL_RETURN, LITERAL_SYNCHRONIZED,
                   LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS_ASSIGN, MOD,
                   MOD_ASSIGN, NOT_EQUAL, PLUS_ASSIGN, QUESTION, RCURLY,
                   SL, SLIST, SL_ASSIGN, SR, SR_ASSIGN, STAR_ASSIGN,
                   TYPE_EXTENSION_AND"/>
        </module>

        <module name="SuppressWarnings">
            <property name="format" value=".*"/>
            <property name="tokens"
                     value="CLASS_DEF,INTERFACE_DEF,ENUM_DEF,ANNOTATION_DEF,ANNOTATION_FIELD_DEF,
                            ENUM_CONSTANT_DEF,METHOD_DEF,CTOR_DEF,PARAMETER_DEF,VARIABLE_DEF"/>
            <message key="suppressed.warning.not.allowed" value="Do not suppress warnings in this course."/>
        </module>

        <module name="IllegalToken">
            <property name="id" value="ImplementationInheritance"/>
            <property name="tokens" value="EXTENDS_CLAUSE"/>
            <message key="illegal.token" value="Do not use implementation inheritance in this course."/>
        </module>

        <module name="IllegalToken">
            <property name="id" value="TypeParameter"/>
            <property name="tokens" value="TYPE_UPPER_BOUNDS, TYPE_LOWER_BOUNDS, TYPE_EXTENSION_AND"/>
            <message key="illegal.token" value="You should not need to use type upper or lower bounds in this course."/>
        </module>

        <module name="IllegalToken">
            <property name="id" value="TypeParameter"/>
            <property name="tokens" value="WILDCARD_TYPE"/>
            <message key="illegal.token" value="You should not need to use wildcard types in this course."/>
        </module>

        <module name="IllegalToken">
            <property name="id" value="BitwiseXor"/>
            <property name="tokens" value="BXOR, BXOR_ASSIGN"/>
            <message key="illegal.token" value="Did you mean to use ''Math.pow()'' instead of the bitwise XOR operator (''^'') ?"/>
        </module>

        <module name="IllegalToken">
            <property name="id" value="IllegalKeyword"/>
            <property name="tokens" value="LITERAL_NATIVE, STRICTFP, LITERAL_VOLATILE, LITERAL_TRANSIENT, LITERAL_SYNCHRONIZED, LITERAL_THROWS, LITERAL_SUPER, ABSTRACT"/>
            <message key="illegal.token" value="Do not use the keyword ''{0}'' in this course."/>
        </module>

        <module name="IllegalToken">
            <property name="id" value="StaticInitializer"/>
            <property name="tokens" value="STATIC_INIT"/>
            <message key="illegal.token" value="Do not use static initializers in this course."/>
        </module>

        <module name="IllegalToken">
          <property name="id" value="InstanceOf"/>
          <property name="tokens" value="LITERAL_INSTANCEOF"/>
          <message key="illegal.token" value="Do not use the ''instanceof'' operator in this course. Use ''getClass()'' to compare classes."/>
        </module>

        <module name="IllegalCatch">
            <property name="illegalClassNames" value="java.lang.Exception,           Exception,
                                                      java.lang.Error,               Error,
                                                      java.lang.Throwable,           Throwable,
                                                      java.lang.RuntimeException,    RuntimeException"/>
            <message key="illegal.catch" value="Do not catch ''{0}'' in this course. You may catch specific exceptions, such as ''java.lang.IllegalArgumentException''."/>
        </module>

        <module name="IllegalCatch">
            <property name="illegalClassNames" value="java.lang.AssertionError,      AssertionError,
                                                      java.lang.VirtualMachineError, VirtualMachineError,
                                                      java.lang.InternalError,       InternalError,
                                                      java.lang.StackOverflowError,  StackOverflowError,
                                                      java.lang.UnknownError,        UnknownError, 
                                                      java.lang.OutOfMemoryError,    OutOfMemoryError"/>
            <message key="illegal.catch" value="Do not catch ''{0}'' in this course."/>
        </module>

        <module name="Profanity"/>

        <module name="Comment"/>

        <module name="StringLiteralCount">
            <property name="allowedDuplicates" value="1"/>
            <property name="ignoreStringsRegexp" value='^"([^a-zA-Z][deEfFs]?)*(\\n)?"$'/>
            <property name="ignoreMainMethod" value="true"/>
            <property name="ignoreToStringMethod" value="true"/>
            <property name="ignoreOccurrenceContext" value="LITERAL_THROW"/>
        </module>

        <module name="LineLength">
            <property name="max" value="100"/>
            <message key="maxLineLen" value="Line length is {1,number,integer} characters (max allowed is {0,number,integer})."/>
        </module>

        <module name="MethodLength">
            <property name="max" value="150"/>
            <property name="countEmpty" value="true"/>
            <message key="maxLine.method" value="Method length is {0,number,integer} lines (max allowed is {1,number,integer})."/>
        </module>

        <module name="IllegalToken">
            <property name="id" value="BitwiseOr"/>
            <property name="tokens" value="BOR, BOR_ASSIGN"/>
            <message key="illegal.token" value="Did you mean to use the conditional OR operator (''||'') instead of the bitwise OR operator (''|'') ?"/>
        </module>

        <module name="IllegalToken">
            <property name="id" value="BitwiseAnd"/>
            <property name="tokens" value="BAND, BAND_ASSIGN"/>
            <message key="illegal.token" value="Did you mean to use the conditional AND operator (''&amp;&amp;'') instead of the bitwise AND operator (''&amp;'') ?"/>
        </module>

        <module name="IllegalToken">
            <property name="id" value="VariableLengthArgument"/>
            <property name="tokens" value="ELLIPSIS"/>
            <message key="illegal.token" value="Do not use variable-length arguments in this course."/>
        </module>

        <module name="IllegalType">
            <property name="illegalClassNames" value="java.util.Scanner"/>
            <message key="illegal.type" value="Do not use ''java.util.Scanner'' in this course. Instead, use ''stdlib.StdIn'' or ''stdlib.In''."/>
        </module>
    </module>
</module>
